{"version":3,"sources":["components/SatMarker.js","components/Map.js","App/App.js","reportWebVitals.js","index.js"],"names":["SatMarker","_ref","lat","lng","data","click","status","React","createElement","Marker","position","onClick","icon","url","scaledSize","window","google","maps","Size","Map","defaultProps","center","zoom","isLoaded","useJsApiLoader","googleMapsApiKey","className","GoogleMap","mapContainerStyle","height","width","onLoad","console","log","onError","e","error","map","sat","_sat$positions$","_sat$positions$2","key","info","satname","positions","satlatitude","satlongitude","sats","require","darkTheme","createTheme","palette","mode","App","_data$","_data$2","_data$3","setData","useState","selectedData","setSelectedData","popup","setPopup","objects","setObjects","useEffect","refresh","newData","promises","axios","get","Promise","all","then","res","forEach","obj","push","interval1","setInterval","clearInterval","handleClose","ThemeProvider","theme","CssBaseline","AppBar","Toolbar","Typography","variant","noWrap","component","sx","flexGrow","display","xs","sm","Autocomplete","disablePortal","multiple","options","getOptionLabel","option","_option$label","label","renderInput","params","TextField","Object","assign","margin","defaultValue","onChange","event","newValue","array","id","sataltitude","Dialog","open","onClose","DialogTitle","DialogContent","Grid","container","spacing","item","Math","round","distance","lat1","lon1","lat2","lon2","alt","R","sqrt","getDistanceFromLatLonInKm","calculateSpeed","DialogActions","Button","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.bb787a18.chunk.js","sourcesContent":["import React from 'react';\nimport { Marker } from '@react-google-maps/api';\n\nconst SatMarker = ({ lat, lng, data, click, status }) => {\n    return (\n        <Marker\n            position={{ lat, lng }}\n            onClick={() => click(data)}\n            icon={{\n                url: '/sat.png', // Replace with the path to your custom icon\n                scaledSize: new window.google.maps.Size(40, 40), // Adjust size as needed\n            }}\n        />\n    );\n};\n\nexport default SatMarker;","import React from 'react';\nimport { GoogleMap, useJsApiLoader } from '@react-google-maps/api';\nimport SatMarker from './SatMarker';\n\nconst Map = ({ data, click, status }) => {\n    const defaultProps = {\n        center: {\n            lat: 0,\n            lng: 0\n        },\n        zoom: 2.5\n    };\n\n    const { isLoaded } = useJsApiLoader({\n        googleMapsApiKey: \"AIzaSyD_gaH-BnlRksIo_GJTmbQ-2uwn9i80S7o\"\n    });\n\n    if (!isLoaded) {\n        return <div>Loading...</div>;\n    }\n\n    return (\n        <div className=\"map\">\n            <GoogleMap\n                center={defaultProps.center}\n                zoom={defaultProps.zoom}\n                mapContainerStyle={{ height: \"100vh\", width: \"100%\" }}\n                onLoad={() => console.log(\"Map loaded successfully\")}\n                onError={(e) => console.error(\"Map failed to load\", e)}\n            >\n                {data?.map(sat => (\n                    <SatMarker\n                        key={sat?.info.satname}\n                        lat={sat?.positions[0]?.satlatitude}\n                        lng={sat?.positions[0]?.satlongitude}\n                        data={sat}\n                        click={click}\n                        status={status}\n                    />\n                ))}\n            </GoogleMap>\n        </div>\n    );\n};\n\nexport default Map;\n","import React, { useEffect, useState } from 'react';\nimport axios from 'axios'\n\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport { CssBaseline, Dialog, DialogContent, DialogTitle, DialogActions, Button, Grid, Typography, TextField, AppBar, Toolbar, Autocomplete } from '@mui/material';\n\nimport Map from '../components/Map.js'\n\nimport './App.css';\n\nconst sats = require(\"./sats.json\")\n\nconst darkTheme = createTheme({\n  palette: {\n    mode: 'dark',\n  },\n});\n\nconst App = () => {\n  const [data, setData] = useState();\n  const [selectedData, setSelectedData] = useState();\n  const [popup, setPopup] = useState(false);\n  const [objects, setObjects] = useState([25544, 20580]);\n\n  useEffect(() => {\n    const refresh = () => {\n      const newData = [];\n      const promises = objects.map(e =>\n        axios.get(`https://proxy.corsfix.com/?https://api.n2yo.com/rest/v1/satellite/positions/${e}/41.702/-76.014/0/2&apiKey=UU6K2M-9GE4WA-DSB4BX-542I`)\n      );\n      Promise.all(promises).then(function (res) {\n        res.forEach(obj => {\n          newData.push(obj.data);\n        });\n        console.log(newData);\n        setData(newData);\n      });\n    };\n\n    refresh();\n\n    const interval1 = setInterval(() => {\n      refresh();\n    }, 30 * 1000); // Every 30 seconds\n    return () => clearInterval(interval1);\n  }, [objects]);\n\n  const handleClickOpen = (sat) => {\n    console.log(sat);\n    setSelectedData(sat)\n    setPopup(true);\n  }\n\n  const handleClose = () => {\n    setPopup(false);\n  };\n\n  const calculateSpeed = (data) => {\n    const lat1 = data.positions[0].satlatitude\n    const lon1 = data.positions[0].satlongitude\n    const lat2 = data.positions[1].satlatitude\n    const lon2 = data.positions[1].satlongitude\n    const alt = data.positions[0].sataltitude\n    const distance = getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2, alt)\n\n    return Math.round(distance * 100) / 100\n  };\n\n  function getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2, alt) {\n    var R = (12742 / 2) + alt; // Radius of the earth in km\n    var j = 398600.5; //Standard Gravitational Parameter\n    var v = Math.sqrt(j / R); // Velocity\n    return v;\n  }\n\n  return (\n    <ThemeProvider theme={darkTheme}>\n      <CssBaseline />\n      <main>\n        <AppBar position=\"fixed\">\n          <Toolbar>\n            <Typography\n              variant=\"h6\"\n              noWrap\n              component=\"div\"\n              sx={{ flexGrow: 1, display: { xs: 'none', sm: 'block' } }}\n            >\n              Satellite Tracker\n            </Typography>\n            <Autocomplete\n              disablePortal\n              multiple\n              options={sats}\n              getOptionLabel={(option) => option.label ?? option}\n              renderInput={(params) => <TextField {...params} label=\"Search\" margin=\"normal\" />}\n              defaultValue={[sats[67], sats[24]]}\n              onChange={(event, newValue) => {\n                console.log(newValue);\n                if (newValue) {\n                  const array = []\n                  newValue.forEach(e => {\n                    array.push(e.id)\n                  });\n                  setObjects(array)\n                }\n              }}\n            />\n          </Toolbar>\n        </AppBar>\n        {data ? (<Map data={data} click={handleClickOpen} status={data[0]?.info.satname && data[0]?.positions[0].sataltitude === 0 ? (\"dead\") : (data[0]?.info.satname ? (\"alive\") : (\"notfound\"))} />) : \"loading\"}\n\n        {popup && selectedData ? (\n          <Dialog open={popup} onClose={handleClose}>\n            <DialogTitle>{selectedData?.info.satname ? (selectedData?.info.satname) : (\"Not Found\")}</DialogTitle>\n            <DialogContent>\n              {selectedData?.info.satname && selectedData?.positions[0].sataltitude === 0 ? (\"Decayed\") : (\n                <Grid container spacing={4} >\n                  <Grid item xs={6}>\n                    <Typography variant=\"subtitle1\" component=\"h2\">Altitude</Typography>\n                    <Typography display=\"inline-block\" variant=\"h4\" component=\"h2\">{Math.round(selectedData?.positions[0].sataltitude)}</Typography> <Typography display=\"inline-block\" variant=\"h6\" component=\"h2\">Km</Typography>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Typography variant=\"subtitle1\" component=\"h2\">Speed</Typography>\n                    <Typography display=\"inline-block\" variant=\"h4\" component=\"h2\">{selectedData?.info.satname ? (calculateSpeed(selectedData)) : (\"0\")}</Typography> <Typography display=\"inline-block\" variant=\"h6\" component=\"h2\">Km/s</Typography>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Typography variant=\"subtitle1\" component=\"h2\">Latitude</Typography>\n                    <Typography variant=\"h4\" component=\"h2\">{selectedData?.positions[0].satlatitude}</Typography>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Typography variant=\"subtitle1\" component=\"h2\">Longitude</Typography>\n                    <Typography variant=\"h4\" component=\"h2\">{selectedData?.positions[0].satlongitude}</Typography>\n                  </Grid>\n                </Grid>\n              )}\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={handleClose}>Close</Button>\n            </DialogActions>\n          </Dialog>\n        ) :\n          null}\n      </main>\n    </ThemeProvider >\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App/App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}