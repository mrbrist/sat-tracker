{"version":3,"sources":["components/Map.js","App/App.js","reportWebVitals.js","index.js"],"names":["Map","_ref","data","click","status","defaultProps","center","lat","lng","zoom","React","createElement","className","LoadScript","googleMapsApiKey","GoogleMap","mapContainerStyle","height","width","Marker","key","position","sats","require","darkTheme","createTheme","palette","mode","App","_data$","_data$2","_data$3","setData","useState","selectedData","setSelectedData","popup","setPopup","objects","setObjects","useEffect","refresh","newData","promises","map","e","axios","get","Promise","all","then","res","forEach","obj","push","interval1","setInterval","clearInterval","handleClose","ThemeProvider","theme","CssBaseline","AppBar","Toolbar","Typography","variant","noWrap","component","sx","flexGrow","display","xs","sm","Autocomplete","disablePortal","multiple","options","getOptionLabel","option","_option$label","label","renderInput","params","TextField","Object","assign","margin","defaultValue","onChange","event","newValue","console","log","array","id","sat","info","satname","positions","sataltitude","Dialog","open","onClose","DialogTitle","DialogContent","Grid","container","spacing","item","Math","round","satlatitude","satlongitude","distance","lat1","lon1","lat2","lon2","alt","R","sqrt","getDistanceFromLatLonInKm","calculateSpeed","DialogActions","Button","onClick","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.33cc6d04.chunk.js","sourcesContent":["import React from 'react';\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\n\n// import SatMarker from './SatMarker';\n\nconst Map = ({ data, click, status }) => {\n    const defaultProps = {\n        center: {\n            lat: 0,\n            lng: 0\n        },\n        zoom: 2.5\n    };\n\n    return (\n        <div className=\"map\">\n            <LoadScript googleMapsApiKey=\"AIzaSyD_gaH-BnlRksIo_GJTmbQ-2uwn9i80S7o\">\n                <GoogleMap\n                    center={defaultProps.center}\n                    zoom={defaultProps.zoom}\n                    mapContainerStyle={{ height: \"100vh\", width: \"100%\" }}\n                >\n                    <Marker\n                            key=\"90\"\n                            position={{\n                                lat: 50,\n                                lng: 50\n                            }}\n                            // onClick={() => click(sat)}\n                        />\n                    {/* {data?.map(sat => (\n                    // <SatMarker lat={sat?.positions[0].satlatitude} lng={sat?.positions[0].satlongitude} data={sat} click={click} status={status} />\n                        <Marker\n                            key={sat?.info.satname}\n                            position={{\n                                lat: 50,\n                                lng: 50\n                            }}\n                            onClick={() => click(sat)}\n                        />\n                    ))} */}\n                </GoogleMap>\n            </LoadScript>\n        </div>\n    );\n};\n\nexport default Map;\n","import React, { useEffect, useState } from 'react';\nimport axios from 'axios'\n\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport { CssBaseline, Dialog, DialogContent, DialogTitle, DialogActions, Button, Grid, Typography, TextField, AppBar, Toolbar, Autocomplete } from '@mui/material';\n\nimport Map from '../components/Map.js'\n\nimport './App.css';\n\nconst sats = require(\"./sats.json\")\n\nconst darkTheme = createTheme({\n  palette: {\n    mode: 'dark',\n  },\n});\n\nconst App = () => {\n  const [data, setData] = useState();\n  const [selectedData, setSelectedData] = useState();\n  const [popup, setPopup] = useState(false);\n  const [objects, setObjects] = useState([25544, 20580]);\n\n  useEffect(() => {\n    const refresh = () => {\n      const newData = [];\n      const promises = objects.map(e =>\n        axios.get(`https://api.n2yo.com/rest/v1/satellite/positions/${e}/41.702/-76.014/0/2&apiKey=UU6K2M-9GE4WA-DSB4BX-542I`)\n      );\n      Promise.all(promises).then(function (res) {\n        res.forEach(obj => {\n          newData.push(obj.data);\n        });\n\n        setData(newData);\n      });\n    };\n\n    refresh();\n\n    const interval1 = setInterval(() => {\n      refresh();\n    }, 30 * 1000); // Every 30 seconds\n    return () => clearInterval(interval1);\n  }, [objects]);\n\n  const handleClickOpen = (sat) => {\n    console.log(sat);\n    setSelectedData(sat)\n    setPopup(true);\n  }\n\n  const handleClose = () => {\n    setPopup(false);\n  };\n\n  const calculateSpeed = (data) => {\n    const lat1 = data.positions[0].satlatitude\n    const lon1 = data.positions[0].satlongitude\n    const lat2 = data.positions[1].satlatitude\n    const lon2 = data.positions[1].satlongitude\n    const alt = data.positions[0].sataltitude\n    const distance = getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2, alt)\n\n    return Math.round(distance * 100) / 100\n  };\n\n  function getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2, alt) {\n    var R = (12742 / 2) + alt; // Radius of the earth in km\n    var j = 398600.5; //Standard Gravitational Parameter\n    var v = Math.sqrt(j / R); // Velocity\n    return v;\n  }\n\n  return (\n    <ThemeProvider theme={darkTheme}>\n      <CssBaseline />\n      <main>\n        <AppBar position=\"fixed\">\n          <Toolbar>\n            <Typography\n              variant=\"h6\"\n              noWrap\n              component=\"div\"\n              sx={{ flexGrow: 1, display: { xs: 'none', sm: 'block' } }}\n            >\n              Satellite Tracker\n            </Typography>\n            <Autocomplete\n              disablePortal\n              multiple\n              options={sats}\n              getOptionLabel={(option) => option.label ?? option}\n              renderInput={(params) => <TextField {...params} label=\"Search\" margin=\"normal\" />}\n              defaultValue={[sats[67], sats[24]]}\n              onChange={(event, newValue) => {\n                console.log(newValue);\n                if (newValue) {\n                  const array = []\n                  newValue.forEach(e => {\n                    array.push(e.id)\n                  });\n                  setObjects(array)\n                }\n              }}\n            />\n          </Toolbar>\n        </AppBar>\n        {data ? (<Map data={data} click={handleClickOpen} status={data[0]?.info.satname && data[0]?.positions[0].sataltitude === 0 ? (\"dead\") : (data[0]?.info.satname ? (\"alive\") : (\"notfound\"))} />) : \"loading\"}\n\n        {popup && selectedData ? (\n          <Dialog open={popup} onClose={handleClose}>\n            <DialogTitle>{selectedData?.info.satname ? (selectedData?.info.satname) : (\"Not Found\")}</DialogTitle>\n            <DialogContent>\n              {selectedData?.info.satname && selectedData?.positions[0].sataltitude === 0 ? (\"Decayed\") : (\n                <Grid container spacing={4} >\n                  <Grid item xs={6}>\n                    <Typography variant=\"subtitle1\" component=\"h2\">Altitude</Typography>\n                    <Typography display=\"inline-block\" variant=\"h4\" component=\"h2\">{Math.round(selectedData?.positions[0].sataltitude)}</Typography> <Typography display=\"inline-block\" variant=\"h6\" component=\"h2\">Km</Typography>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Typography variant=\"subtitle1\" component=\"h2\">Speed</Typography>\n                    <Typography display=\"inline-block\" variant=\"h4\" component=\"h2\">{selectedData?.info.satname ? (calculateSpeed(selectedData)) : (\"0\")}</Typography> <Typography display=\"inline-block\" variant=\"h6\" component=\"h2\">Km/s</Typography>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Typography variant=\"subtitle1\" component=\"h2\">Latitude</Typography>\n                    <Typography variant=\"h4\" component=\"h2\">{selectedData?.positions[0].satlatitude}</Typography>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Typography variant=\"subtitle1\" component=\"h2\">Longitude</Typography>\n                    <Typography variant=\"h4\" component=\"h2\">{selectedData?.positions[0].satlongitude}</Typography>\n                  </Grid>\n                </Grid>\n              )}\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={handleClose}>Close</Button>\n            </DialogActions>\n          </Dialog>\n        ) :\n          null}\n      </main>\n    </ThemeProvider >\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App/App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}