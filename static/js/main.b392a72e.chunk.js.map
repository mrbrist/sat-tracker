{"version":3,"sources":["components/SatMarker.js","components/Map.js","App/App.js","reportWebVitals.js","index.js"],"names":["SatMarker","_ref","position","data","click","status","lat","latitude","lng","longitude","newData","name","split","satlatitude","satlongitude","sataltitude","altitude","velocity","React","createElement","Marker","key","onClick","icon","url","process","scaledSize","window","google","maps","Size","Map","defaultProps","center","zoom","isLoaded","useJsApiLoader","googleMapsApiKey","calculateSpeed","lat1","lon1","lat2","lon2","alt","distance","R","Math","sqrt","getDistanceFromLatLonInKm","round","calculateLatLon","d","tleLine1","tleLine2","satrec","satellite","now","Date","positionEci","gmst","positionGd","positionGd2","latitude2","longitude2","height","className","GoogleMap","mapContainerStyle","width","onLoad","console","log","onError","e","error","map","sat","OBJECT_NAME","sats","require","darkTheme","createTheme","palette","mode","App","setData","useState","selectedData","setSelectedData","popup","setPopup","objects","setObjects","useEffect","refresh","promises","axios","get","Promise","all","then","res","forEach","obj","push","interval1","setInterval","clearInterval","handleClose","ThemeProvider","theme","CssBaseline","AppBar","Toolbar","Typography","variant","noWrap","component","sx","flexGrow","display","xs","sm","Autocomplete","disablePortal","multiple","options","getOptionLabel","option","_option$label","label","renderInput","params","TextField","Object","assign","margin","defaultValue","onChange","event","newValue","array","id","Dialog","open","onClose","DialogTitle","DialogContent","Grid","container","spacing","item","toFixed","DialogActions","Button","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.b392a72e.chunk.js","sourcesContent":["import React from 'react';\nimport { Marker } from '@react-google-maps/api';\n\nconst SatMarker = ({ position, data, click, status }) => {\n    const lat = position.latitude;\n    const lng = position.longitude;\n    const newData = {\n        name: data.split(\"\\n\")[0],\n        satlatitude: position.latitude,\n        satlongitude: position.longitude,\n        sataltitude: position.altitude,\n        velocity: position.velocity,\n    }\n    return (\n        <Marker\n            key={data.split(\"\\n\")[0]}\n            position={{ lat, lng }}\n            onClick={() => click(newData)}\n            icon={{\n                url: process.env.PUBLIC_URL + '/sat.png', // Replace with the path to your custom icon\n                scaledSize: new window.google.maps.Size(40, 40), // Adjust size as needed\n            }}\n        />\n    );\n};\n\nexport default SatMarker;","import React from 'react';\nimport { GoogleMap, useJsApiLoader } from '@react-google-maps/api';\nimport * as satellite from 'satellite.js';\nimport SatMarker from './SatMarker';\n\nconst Map = ({ data, click, status, lat, lng }) => {\n    const defaultProps = {\n        center: {\n            lat: 0,\n            lng: 0\n        },\n        zoom: 2.5\n    };\n\n    const { isLoaded } = useJsApiLoader({\n        googleMapsApiKey: \"AIzaSyD_gaH-BnlRksIo_GJTmbQ-2uwn9i80S7o\"\n    });\n\n    if (!isLoaded) {\n        return <div>Loading...</div>;\n    }\n\n    const calculateSpeed = (lat1,lon1,lat2,lon2,alt) => {\n        const distance = getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2, alt)\n    \n        return Math.round(distance * 100) / 100\n      };\n      function getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2, alt) {\n        var R = (12742 / 2) + alt; // Radius of the earth in km\n        var j = 398600.5; //Standard Gravitational Parameter\n        var v = Math.sqrt(j / R); // Velocity\n        return v;\n      }\n\n    function calculateLatLon(d) {\n        // Define the TLE lines using the provided variables\n        const tleLine1 = d.split(\"\\n\")[1];\n        const tleLine2 = d.split(\"\\n\")[2];\n      \n        // Parse the TLE lines\n        const satrec = satellite.twoline2satrec(tleLine1, tleLine2);\n      \n        // Get the current time\n        const now = new Date();\n      \n        // Propagate the satellite's position\n        const positionAndVelocity = satellite.propagate(satrec, now);\n      \n        // Extract the ECI position\n        const positionEci = positionAndVelocity.position;\n      \n        // Calculate GMST (Greenwich Mean Sidereal Time)\n        const gmst = satellite.gstime(now);\n      \n        // Convert ECI to geodetic coordinates (latitude, longitude, altitude)\n        const positionGd = satellite.eciToGeodetic(positionEci, gmst);\n        const positionGd2 = satellite.eciToGeodetic(positionEci, gmst);\n      \n        // Convert latitude and longitude from radians to degrees\n        const latitude = satellite.degreesLat(positionGd.latitude);\n        const longitude = satellite.degreesLong(positionGd.longitude);\n        const latitude2 = satellite.degreesLat(positionGd2.latitude);\n        const longitude2 = satellite.degreesLong(positionGd2.longitude);\n        const altitude = positionGd.height; // Altitude in kilometers\n      \n        // console.log(`Latitude: ${latitude}, Longitude: ${longitude}, Altitude: ${altitude} km`);\n        return { \"latitude\": latitude, \"longitude\": longitude, \"altitude\": altitude, \"velocity\": calculateSpeed(latitude, longitude, latitude2, longitude2, altitude) };\n      };\n\n    return (\n        <div className=\"map\">\n            <GoogleMap\n                center={defaultProps.center}\n                zoom={defaultProps.zoom}\n                mapContainerStyle={{ height: \"100vh\", width: \"100%\" }}\n                onLoad={() => console.log(\"Map loaded successfully\")}\n                onError={(e) => console.error(\"Map failed to load\", e)}\n            >\n                {data?.map(sat => (\n                    <SatMarker\n                        key={sat?.OBJECT_NAME}\n                        position={calculateLatLon(sat)}\n                        data={sat}\n                        click={click}\n                        status={status}\n                    />\n                ))}\n            </GoogleMap>\n        </div>\n    );\n};\n\nexport default Map;\n","import React, { useEffect, useState } from 'react';\nimport axios from 'axios'\n\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport { CssBaseline, Dialog, DialogContent, DialogTitle, DialogActions, Button, Grid, Typography, TextField, AppBar, Toolbar, Autocomplete } from '@mui/material';\n\nimport Map from '../components/Map.js'\n\nimport './App.css';\n\nconst sats = require(\"./sats.json\")\n\nconst darkTheme = createTheme({\n  palette: {\n    mode: 'dark',\n  },\n});\n\nconst App = () => {\n  const [data, setData] = useState();\n  const [selectedData, setSelectedData] = useState();\n  const [popup, setPopup] = useState(false);\n  const [objects, setObjects] = useState([25544, 20580]);\n\n  useEffect(() => {\n    const refresh = () => {\n      const newData = [];\n      const promises = objects.map(e =>\n        axios.get(`https://celestrak.org/NORAD/elements/gp.php?CATNR=${e}&FORMAT=TLE`)\n      );\n      Promise.all(promises).then(function (res) {\n        res.forEach(obj => {\n          newData.push(obj.data);\n        });\n        setData(newData);\n      });\n    };\n\n    refresh();\n\n    const interval1 = setInterval(() => {\n      refresh();\n    }, 30 * 1000); // Every 30 seconds\n    return () => clearInterval(interval1);\n  }, [objects]);\n\n  const handleClickOpen = (sat) => {\n    console.log(sat);\n    setSelectedData(sat)\n    setPopup(true);\n  }\n\n  const handleClose = () => {\n    setPopup(false);\n  };\n\n  return (\n    <ThemeProvider theme={darkTheme}>\n      <CssBaseline />\n      <main>\n        <AppBar position=\"fixed\">\n          <Toolbar>\n            <Typography\n              variant=\"h6\"\n              noWrap\n              component=\"div\"\n              sx={{ flexGrow: 1, display: { xs: 'none', sm: 'block' } }}\n            >\n              Satellite Tracker\n            </Typography>\n            <Autocomplete\n              disablePortal\n              multiple\n              options={sats}\n              getOptionLabel={(option) => option.label ?? option}\n              renderInput={(params) => <TextField {...params} label=\"Search\" margin=\"normal\" />}\n              defaultValue={[sats[67], sats[24]]}\n              onChange={(event, newValue) => {\n                console.log(newValue);\n                if (newValue) {\n                  const array = []\n                  newValue.forEach(e => {\n                    array.push(e.id)\n                  });\n                  setObjects(array)\n                }\n              }}\n            />\n          </Toolbar>\n        </AppBar>\n        {data ? (<Map data={data} click={handleClickOpen} status=\"alive\" />) : \"loading\"}\n\n        {popup && selectedData ? (\n          <Dialog open={popup} onClose={handleClose}>\n            <DialogTitle>{selectedData?.name ? (selectedData?.name) : (\"Not Found\")}</DialogTitle>\n            <DialogContent>\n              {selectedData?.name && selectedData?.sataltitude === 0 ? (\"Decayed\") : (\n                <Grid container spacing={4} >\n                  <Grid item xs={6}>\n                    <Typography variant=\"subtitle1\" component=\"h2\">Altitude</Typography>\n                    <Typography display=\"inline-block\" variant=\"h4\" component=\"h2\">{Math.round(selectedData?.sataltitude)}</Typography> <Typography display=\"inline-block\" variant=\"h6\" component=\"h2\">Km</Typography>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Typography variant=\"subtitle1\" component=\"h2\">Speed</Typography>\n                    <Typography display=\"inline-block\" variant=\"h4\" component=\"h2\">{selectedData?.velocity}</Typography> <Typography display=\"inline-block\" variant=\"h6\" component=\"h2\">Km/s</Typography>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Typography variant=\"subtitle1\" component=\"h2\">Latitude</Typography>\n                    <Typography variant=\"h4\" component=\"h2\">{selectedData?.satlatitude.toFixed(5)}</Typography>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Typography variant=\"subtitle1\" component=\"h2\">Longitude</Typography>\n                    <Typography variant=\"h4\" component=\"h2\">{selectedData?.satlongitude.toFixed(5)}</Typography>\n                  </Grid>\n                </Grid>\n              )}\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={handleClose}>Close</Button>\n            </DialogActions>\n          </Dialog>\n        ) :\n          null}\n      </main>\n    </ThemeProvider >\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App/App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}